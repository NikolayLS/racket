(define (id x) x)
(define (1+ x) (+ x 1))
(define (accumulate op nv a b term next)
  (if(> a b)
      nv
     (op (term a) (accumulate op nv (next a) b term next))))

(define (topSide* n)
  (define (op x y)
    (display #\u2500))
  (accumulate op 1 1 (+ 1 (* n 4)) id 1+))

(define (topSide n)
  (display #\u250C)
  (topSide* (- n 1))
  (display #\u2510))

(define (downSide* n)
  (define (op x y)
    (display #\u2500))
  (accumulate op 1 1 (+ 1 (* n 4)) id 1+))

(define (downSide n)
  (display #\u2514)
  (topSide* (- n 1))
  (display #\u2518))

(define(rightSide n)
  (define (op x y)
    (display #\u2502)
    (display #\space))
  (accumulate op 1 1 n id 1+))
 
(define(leftSide n)
  (define (op x y)
    (display #\space)
    (display #\u2502))
  (accumulate op  (display #\â€Ž) 1 n id 1+))

(define(printTopSide n)
  (define  (op x y)
    (cond ((= x n)
           (rightSide (- n x))
           (topSide x)
           (leftSide (- n x)))
          (else (display #\newline)
                (rightSide (- n x))
                (topSide x)
                (leftSide (- n x)))))
  (accumulate op 1 1 n id 1+))

(define(printDownSide n)
  (define (idReverse x) (- n (- x 1)))
  (define  (op x y)
    (display #\newline)
    (rightSide (- n x))
    (downSide x)
    (leftSide (- n x)))
  (accumulate op 0 1 n idReverse 1+))

(define (square n)
  (printTopSide n)
  (printDownSide n)
  )